language: csharp
mono: none
sudo: required
dist: xenial
dotnet: 2.2

script:
    # set necessary permissions (so worker project output can be in web etc)
    # - |
    #   sudo chown -R $USER:$USER $TRAVIS_BUILD_DIR
    #   sudo chmod -R 775 $TRAVIS_BUILD_DIR

    # build projects
    - cd Compile.and.Execute/src/
    - echo Building Projects

    # needs sudo to write to different output folders
    - |
      sudo dotnet build Sigged.Compiling.Core/Sigged.Compiling.Core.csproj -c Release
      sudo dotnet build Sigged.Compiling.Core.Tests/Sigged.Compiling.Core.Tests.csproj -c Release
      sudo dotnet build Sigged.CodeHost.Worker/Sigged.CodeHost.Worker.csproj -c Release
      sudo dotnet build Sigged.CsC.NetCore.Web/Sigged.CsC.NetCore.Web.csproj -c Release
      sudo dotnet build Sigged.CodeHost.Worker.Tests/Sigged.CodeHost.Worker.Tests.csproj -c Release

    # test projects
    - echo Testing Projects
    - |
      dotnet test --no-build Sigged.Compiling.Core.Tests/Sigged.Compiling.Core.Tests.csproj -c Release --verbosity normal
      dotnet test --no-build Sigged.CodeHost.Worker.Tests/Sigged.CodeHost.Worker.Tests.csproj -c Release --verbosity normal
after_success:
    # push to docker
    - |
      echo Building Docker image
      docker build -f Dockerfile -t "${DOCKERHUB_CONTAINERNAME}" .
    - |
      echo Pushing to Docker Hub
      docker login -u "${DOCKERHUB_USER}" -p "${DOCKERHUB_PASS}"
      docker push "${DOCKERHUB_CONTAINERNAME}"
deploy:
    # deploy to heroku
    - |
      echo Deploying application
      docker login --username=_ --password=${HEROKU_AUTHKEY} registry.heroku.com
      docker build -t registry.heroku.com/${HEROKU_APPNAME}/web .
      docker push registry.heroku.com/${HEROKU_APPNAME}/web
